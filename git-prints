#!/usr/bin/env bash
# Run a command on all Git repos under a path

# usage:
# git-prints plan <path> (optional)
# git-prints build <path> (optional)

# shellcheck disable=SC2059

if ! [ $# -gt 0 ] ; then
  printf "ERROR: wrong number of arguments.\n"
fi

# is it running under systemd?
if [ "$TERM" = "dumb" ]; then
  _log_emerg="<0>%s\n" # red
  _log_alert="<1>%s\n"
  _log_crit="<2>%s\n"
  _log_error="<3>%s\n"
  _log_warning="<4>%s\n" # yellow
  _log_notice="<5>%s\n" # white
  _log_info="<6>%s\n"
  _log_debug="<7>%s\n" # muted 

else
  # formatting escape codes
  _fmt_clear="\e[0;0m"
  _fmt_bold="\e[0;1m"
  _fmt_muted="\e[0;2m"
  _fmt_italic="\e[0;3m"
  _fmt_underlined="\e[0;4m"
  _fmt_black="\e[1;30m"
  _fmt_red="\e[1;31m"
  _fmt_green="\e[1;32m"
  _fmt_yellow="\e[1;33m"
  _fmt_blue="\e[1;34m"
  _fmt_purple="\e[1;35m"
  _fmt_cyan="\e[1;36m"
  _fmt_white="\e[1;37m"

  # log levels strings (systemd convention)
  _log_emerg="${_fmt_red}EMERGENCY: %s${_fmt_clear}\n"
  _log_alert="${_fmt_red}ALERT: %s${_fmt_clear}\n"
  _log_crit="${_fmt_red}CRITICAL: %s${_fmt_clear}\n"
  _log_error="${_fmt_red}ERROR: %s${_fmt_clear}\n"
  _log_warning="${_fmt_yellow}WARNING: %s${_fmt_clear}\n"
  _log_notice="${_fmt_bold}NOTICE: %s${_fmt_clear}\n"
  _log_info="${_fmt_clear}INFO: %s\n${_fmt_clear}\n"
  _log_debug="${_fmt_muted}DEBUG: %s${_fmt_clear}\n"
fi

# Checks
# n of arguments
if ! [ $# -gt 0 ] ; then
  printf "ERROR: wrong number of arguments.\n"
fi

# dependencies
_deps=(git fd)
for _prog in "${_deps[@]}"; do
  if [ ! "$(command -v "$_prog")" ]; then
    printf "$_log_error" "$_prog not found found."
    exit 1
  fi
done

# Parse parameters
[ "$1" ] && _mode="$1" || exit 1

if [ "$2" ]; then
  _target_path="$2"

  # change dir to inputted path if valid
  if [ -d "$_target_path" ]; then
    cd "$_target_path" || exit
  fi
else
  _target_path="$(pwd)"
fi

# Library
_debug() {
  printf "Mode: ${_fmt_blue}%s${_fmt_clear}\n" "$_mode"
  printf "Source path: ${_fmt_blue}%s${_fmt_clear}\n" "$_target_path"
}

_plan_dest_path=".gitprints"

_help() {
  printf "${_fmt_bold}Usage:${_fmt_clear}\n"
  printf "git-prints ${_fmt_blue}help${_fmt_clear}\n"
  printf "git-prints ${_fmt_blue}plan${_fmt_clear}  ${_fmt_yellow}<path>${_fmt_clear}\n"
  printf "git-prints ${_fmt_blue}build${_fmt_clear} ${_fmt_yellow}<path>${_fmt_clear}\n"
  printf "git-prints ${_fmt_blue}debug${_fmt_clear}\n"
}

_plan() {
  local _path="${1%/.git/}"
  local _src="${_path}/.git/config"
  local _dest="${_plan_dest_path}/${_path}/config"
  
  _src=${_src/\/\//\/} # remove duplicated slashes
  _dest=${_dest/\/\//\/} # remove duplicated slashes

  if [ "$_path" == ".git/" ]; then # if repo is root path
    _src=".git/config"
    _dest="${_prints_storage}/config"
  fi

  if [ "$GIT_PRINTS_DRY_RUN" == 1 ]; then
    printf "Copy ${_fmt_green}%s${_fmt_clear} to ${_fmt_green}%s${_fmt_clear}\n" "$_src" "$_dest"
  else
    mkdir -p "${_dest%config}"
    cp "$_src" "$_dest" 
  fi
}

_is_submodule() {
  local _path _repo_root _parent_path _parent_repo_root

  _path="$1"
  _repo_root="${_path%/.git/}"

  if [ "$_repo_root" == ".git/" ]; then # if repo is root path
    return 1
  fi

  _parent_path=${_repo_root%/*}
  _parent_repo_root=$(git -C "$_parent_path" rev-parse --show-toplevel)
  _modules_file="${_parent_repo_root}/.gitmodules"

  if [ -a "$_modules_file" ]; then # parent has modules
    # _query="${_path##*/}" # +sensitive
    _query="${_path#"$_parent_repo_root"}" # +specific

    if rg "$_query" < "$_modules_file" &>/dev/null; then # if repo isn't a parent module
      return 1
    else
      return 0
    fi
  fi

  return 1
}

_orchestrate_plan() {
  printf "Orchestrating ${_fmt_blue}%s${_fmt_clear} on ${_fmt_green}%s${_fmt_clear}\n\n" "$_mode" "$_target_path" 

  mapfile -t _repos < <(fd -t d '\.git$' --hidden)

  for _repo in "${_repos[@]}"; do
    if ! _is_submodule "$_repo"; then
      _plan "$_repo"
    fi
  done
}

# TODO: Implement
_build() {
  if [ "$GIT_PRINTS_DRY_RUN" == 1 ]; then
    echo "Do something"
  else
    echo "Do something"
  fi
}

# TODO: Implement
_orchestrate_build() {
  echo "Do something"
}

# Main
main() {
  # Invoke selected mode
  case "$_mode" in
    plan)       _orchestrate_plan;;
    build)      _orchestrate_build;;
    debug)      _debug;;
    *)          _help && exit 1;;
  esac
}

main
