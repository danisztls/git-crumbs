#!/usr/bin/env bash
# Run a command on all Git repos under a path

# usage:
# git-prints plan <path> (optional)
# git-prints build <path> (optional)

# TODO: Prettify outputs.

# Parse parameters
[ "$1" ] && _mode="$1" || exit 1

if [ "$2" ]; then
  _src_path="$2"

  # change dir to inputted path if valid
  if [ -d "$_src_path" ]; then
    cd "$_src_path" || exit
  fi
else
  _src_path="$(pwd)"
fi

_debug() {
  printf "Mode: %s\n" "$_mode"
  printf "Source path: %s\n" "$_src_path"
  printf "Destination path: %s\n" "$_dest_path"
}

_dest_path=".gitprints"

_help() {
  printf "Usage:
    git-prints help
    git-prints plan <path>
    git-prints debug\n"
}

_plan() {
  local _path="${1%/.git/}"
  local _src="${_path}/.git/config"
  local _dest="${_dest_path}/${_path}/config"
  
  _src=${_src/\/\//\/} # remove duplicated slashes
  _dest=${_dest/\/\//\/} # remove duplicated slashes

  if [ "$GIT_PRINTS_DRY_RUN" == 1 ]; then
    printf "Copy %s to %s\n" "$_src" "$_dest"
  else
    mkdir -p "${_dest%config}"
    cp "$_src" "$_dest" 
  fi
}

_is_submodule() {
  local _path _repo_root _parent_path _parent_repo_root

  _path="$1"
  _repo_root="${_path%/.git/}"

  if [ "$_repo_root" == ".git/" ]; then # if repo is root path
    return 1
  fi

  _parent_path=${_repo_root%/*}
  _parent_repo_root=$(git -C "$_parent_path" rev-parse --show-toplevel)
  _modules_file="${_parent_repo_root}/.gitmodules"

  if [ -a "$_modules_file" ]; then # parent has modules
    # _query="${_path##*/}" # +sensitive
    _query="${_path#"$_parent_repo_root"}" # +specific

    if rg "$_query" < "$_modules_file" &>/dev/null; then # if repo isn't a parent module
      return 1
    else
      return 0
    fi
  fi

  return 1
}

_orchestrate_plan() {
  printf "Orchestrating %s on %s\n\n" "$_mode" "$_src_path" 

  mapfile -t _repos < <(fd -t d '\.git$' --hidden)

  for _repo in "${_repos[@]}"; do
    if ! _is_submodule "$_repo"; then
      _plan "$_repo"
    fi
  done
}

# TODO: Implement
_build() {
  if [ "$GIT_PRINTS_DRY_RUN" == 1 ]; then
    echo "Do something"
  else
    echo "Do something"
  fi
}

# TODO: Implement
_orchestrate_build() {
  echo "Do something"
}

main() {
  # Invoke selected mode
  case "$_mode" in
    plan)       _orchestrate_plan;;
    build)      _orchestrate_build;;
    debug)      _debug;;
    *)          _help && exit 1;;
  esac
}

main
